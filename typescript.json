{
	"@Component": {
		"prefix": "@Component",
		"description": "Creates a component definition",
		"body": [
			"import { Component } from '@angular/core';",
			"",
			"@Component({",
			"\tselector: '${1:selector-name}',",
			"\tstyleUrls: ['${2:selector-name}.component.scss'],",
			"\ttemplateUrl: '${2:selector-name}.component.html',",
			"})",
			"export class ${3:Name}Component {",
			"\tconstructor() {}",
			"}",
			""
		]
	},
	"@Injectable": {
		"prefix": "@Injectable",
		"description": "Creates an @Injectable service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"",
			"@Injectable()",
			"export class ${1:Name}Service {",
			"\tconstructor() {}",
			"}"
		]
	},
	"@InjectableCrud": {
		"prefix": "@InjectableCrud",
		"description": "Creates an @Injectable service with CRUD",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { ${1:modelClassName} } from '../models/${2:modelName}.model';",
			"import { Observable, throwError } from 'rxjs';",
			"import { HttpClient } from '@angular/common/http';",
			"import { catchError } from 'rxjs/operators';",
			"",
			"@Injectable()",
			"export class ${1:modelClassName}sService {",
			"private api = 'http://localhost:3000';",
			"constructor(",
			"private http: HttpClient",
			") { }",
			"",
			"create${1:modelClassName}(payload: ${1:modelClassName}): Observable<${1:modelClassName}> {",
			"\t\treturn this.http",
			"\t\t\t.post<${1:modelClassName}>(`${this.api}/${2:modelName}s`, payload)",
			"\t\t\t.pipe(catchError((error: any) => throwError(JSON.stringify(error))));",
			"}",
			"",
			" get${1:modelClassName}s(): Observable<${1:modelClassName}[]> {",
			"\t\t return this.http",
			"\t\t\t.get<${1:modelClassName}[]>(`${this.api}/${2:modelName}s`)",
			"\t\t\t.pipe(catchError((error: any) => throwError(JSON.stringify(error))));",
			"}",
			"",
			"update${1:modelClassName}(payload: ${1:modelClassName}): Observable<${1:modelClassName}> {",
			"\t\treturn this.http",
			"\t\t\t.put<${1:modelClassName}>(`${this.api}/${2:modelName}s/${payload.id}`, payload)",
			"\t\t\t.pipe(catchError((error: any) => throwError(JSON.stringify(error))));",
			"}",
			"",
			"remove${1:modelClassName}(payload: ${1:modelClassName}): Observable<${1:modelClassName}> {",
			"\t\treturn this.http",
			"\t\t\t.delete<any>(`${this.api}/${2:modelName}s/${payload.id}`)",
			"\t\t\t.pipe(catchError((error: any) => throwError(JSON.stringify(error))));",
			"}",
			"}",
			"",
		]
	},
	"@NgModule": {
		"prefix": "@NgModule",
		"description": "Creates an @NgModule",
		"body": [
			"import { NgModule } from '@angular/core';",
			"import { ${1:Name}RoutingModule }  from './${2:path}-routing.module';",
			"import { ${1:Name}MaterialModule }  from './${2:path}-material.module';",
			"",
			"@NgModule({",
			"\timports: [",
			"\t\t${1:Name}RoutingModule,",
			"\t\t${1:Name}MaterialModule,",
			"],",
			"\tdeclarations: [],",
			"\tproviders: []",
			"})",
			"export class ${1:Name}Module {}"
		]
	},
	"@RoutingModule": {
		"prefix": "@RoutingModule",
		"description": "Creates an @NgModule for routes",
		"body": [
			"import { NgModule } from '@angular/core';",
			"import { Routes, RouterModule } from '@angular/router';",
			"",
			"",
			"const routes: Routes = [",
			"];",
			"",
			"",
			"",
			"@NgModule({",
			"\timports: [RouterModule.forChild(routes)],",
			"\texports: [RouterModule]",
			"})",
			"export class ${1:Name}RoutingModule {}",
			""
		]
	},
	"@MaterialModule": {
		"prefix": "@MaterialModule",
		"description": "Creates an @NgModule for Angular Material components",
		"body": [
			"import { NgModule } from '@angular/core';",
			"",
			"const materialModules: any[] = [];",
			"",
			"@NgModule({",
			"\timports: [",
			"\t\t...materialModules",
			"],",
			"\texports: [",
			"\t\t...materialModules",
			"]",
			"})",
			"export class ${1:Name}MaterialModule {}",
			""
		]
	},
	"@Pipe": {
		"prefix": "@Pipe",
		"description": "Creates an @Pipe",
		"body": [
			"import { Pipe, PipeTransform } from '@angular/core';",
			"",
			"@Pipe({",
			"\tname: '${1:selector-name}'",
			"})",
			"export class ${2:Name}Pipe implements PipeTransform {",
			"\ttransform(value: any) {",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"@CustomSerializer": {
		"prefix": "@CustomSerializer",
		"description": "Creates an custom serializer",
		"body": [
			"import * as fromRouter from '@ngrx/router-store';",
			"import { Params, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';",
			"import { ActionReducerMap, createFeatureSelector } from '@ngrx/store';",
			"",
			"",
			"export interface RouterStateUrl {",
			"\turl: string;",
			"\tqueryParams: Params;",
			"\tparams: Params;",
			"}",
			"",
			"export interface State {",
			"\trouterReducer: fromRouter.RouterReducerState<RouterStateUrl>;",
			"}",
			"",
			"export const reducers: ActionReducerMap<State> = {",
			"routerReducer: fromRouter.routerReducer",
			"};",
			"",
			"export const getRouterState = createFeatureSelector<fromRouter.RouterReducerState<RouterStateUrl>>('routerReducer');",
			"",
			"export class CustomSerializer implements fromRouter.RouterStateSerializer<RouterStateUrl> {",
			"\tserialize(routerState: RouterStateSnapshot): RouterStateUrl {",
			"\t\tconst { url } = routerState;",
			"\t\tconst queryParams = routerState.root;",
			"\t\tlet state: ActivatedRouteSnapshot = routerState.root;",
			"\t\twhile (state.firstChild) {",
			"\t\t\tstate = state.firstChild;",
			"\t\t}",
			"\t\tconst { params } = state;",
			"",
			"\t\treturn { url, queryParams, params };",
			"\t}",
			"}"
		]
	},
	"@ActionRouter": {
		"prefix": "@ActionRouter",
		"description": "Action for Routes",
		"body": [
			"import { Action } from '@ngrx/store';",
			"import { NavigationExtras } from '@angular/router';",
			"",
			"export const GO = '[Router] Go';",
			"export const BACK = '[Router] Back';",
			"export const FORWARD = '[Router] Forward';",
			"",
			"export class Go implements Action {",
			"\treadonly type = GO;",
			"\tconstructor(",
			"\t\tpublic payload: {",
			"\t\t\tpath: any[],",
			"\t\t\tquery?: object,",
			"\t\t\textras?: NavigationExtras",
			"\t\t}",
			"\t) { }",
			"}",
			"",
			"export class Back implements Action {",
			"\treadonly type = BACK;",
			"}",
			"",
			"export class Forward implements Action {",
			"\treadonly type = FORWARD;",
			"}",
			"",
			"export type Actions =",
			"\t| Go",
			"\t| Back",
			"\t| Forward;",
			""
		]
	},
	"@ActionsCrud": {
		"prefix": "@ActionsCrud",
		"description": "CRUD ACTIONS",
		"body": [
			"import { Action } from '@ngrx/store';",
			"import { ${1:modelName} } from '../../models/${2:modelName}.model';",
			"",
			"// Load ${1:modelName}s",
			"export const LOAD_${3:MODEL} = '[${1:modelName}s] Load ${1:modelName}s';",
			"export const LOAD_${3:MODEL}_FAIL = '[${1:modelName}s] Load ${1:modelName}s Fail';",
			"export const LOAD_${3:MODEL}_SUCCESS = '[${1:modelName}s] Load ${1:modelName}s Success';",
			"",
			"",
			"export class Load${1:modelName} implements Action {",
			"\t readonly type = LOAD_${3:MODEL};",
			"}",
			"export class Load${1:modelName}Fail implements Action {",
			"\treadonly type = LOAD_${3:MODEL}_FAIL;",
			"\tconstructor(public payload: any) { }",
			"}",
			"",
			"export class Load${1:modelName}Success implements Action {",
			"\treadonly type = LOAD_${3:MODEL}_SUCCESS;",
			"\tconstructor(public payload: ${1:modelName}[]) { }",
			"}",
			"",
			"",
			"// Create ${1:modelName}",
			"export const CREATE_${3:MODEL} = '[${1:modelName}s] Create ${1:modelName}';",
			"export const CREATE_${3:MODEL}_FAIL = '[${1:modelName}s] Create ${1:modelName} Fail';",
			"export const CREATE_${3:MODEL}_SUCCESS = '[${1:modelName}s] Create ${1:modelName} Success';",
			"",
			"",
			"export class Create${1:modelName} implements Action {",
			"\treadonly type = CREATE_${3:MODEL};",
			"\tconstructor(public payload: ${1:modelName}[]) { }",
			"}",
			"",
			"export class Create${1:modelName}Fail implements Action {",
			"\treadonly type = CREATE_${3:MODEL}_FAIL;",
			"\tconstructor(public payload: any) { }",
			"}",
			"",
			"export class Create${1:modelName}Success implements Action {",
			"\treadonly type = CREATE_${3:MODEL}_SUCCESS;",
			"\tconstructor(public payload: ${1:modelName}) { }",
			"}",
			"",
			"",
			"// Update ${1:modelName}",
			"export const UPDATE_${3:MODEL} = '[${1:modelName}s] Update ${1:modelName}';",
			"export const UPDATE_${3:MODEL}_FAIL = '[${1:modelName}s] Update ${1:modelName} Fail';",
			"export const UPDATE_${3:MODEL}_SUCCESS = '[${1:modelName}s] Update ${1:modelName} Success';",
			"",
			"export class Update${1:modelName} implements Action {",
			"\treadonly type = UPDATE_${3:MODEL};",
			"\tconstructor(public payload: ${1:modelName}[]) { }",
			"}",
			"export class Update${1:modelName}Fail implements Action {",
			"\treadonly type = UPDATE_${3:MODEL}_FAIL;",
			"\tconstructor(public payload: any) { }",
			"}",
			"export class Update${1:modelName}Success implements Action {",
			"\treadonly type = UPDATE_${3:MODEL}_SUCCESS;",
			"\tconstructor(public payload: ${1:modelName}) { }",
			"}",
			"",
			"// Remove ${1:modelName}",
			"export const REMOVE_${3:MODEL} = '[${1:modelName}s] Remove ${1:modelName}';",
			"export const REMOVE_${3:MODEL}_FAIL = '[${1:modelName}s] Remove ${1:modelName} Fail';",
			"export const REMOVE_${3:MODEL}_SUCCESS = '[${1:modelName}s] Remove ${1:modelName} Success';",
			"",
			"export class Remove${1:modelName} implements Action {",
			"\treadonly type = REMOVE_${3:MODEL};",
			"\tconstructor(public payload: ${1:modelName}[]) { }",
			"}",
			"",
			"export class Remove${1:modelName}Fail implements Action {",
			"\treadonly type = REMOVE_${3:MODEL}_FAIL;",
			"\tconstructor(public payload: any) { }",
			"}",
			"",
			"export class Remove${1:modelName}Success implements Action {",
			"\treadonly type = REMOVE_${3:MODEL}_SUCCESS;",
			"\tconstructor(public payload: ${1:modelName}) { }",
			"}",
			"",
			"",
			"// Action types",
			"export type ${1:modelName}sAction =",
			"\t| Load${1:modelName}",
			"\t| Load${1:modelName}Fail",
			"\t| Load${1:modelName}Success",
			"\t| Create${1:modelName}",
			"\t| Create${1:modelName}Fail",
			"\t| Create${1:modelName}Success",
			"\t| Update${1:modelName}",
			"\t| Update${1:modelName}Fail",
			"\t| Update${1:modelName}Success",
			"\t| Remove${1:modelName}",
			"\t| Remove${1:modelName}Fail",
			"\t| Remove${1:modelName}Success;",
			""
		]
	},
	"@EffectsCrud": {
		"prefix": "@EffectsCrud",
		"description": "CRUD EFFECTS",
		"body": [
			"import { Injectable } from '@angular/core';",
			"",
			"import { Effect, Actions, ofType } from '@ngrx/effects';",
			"import { switchMap, map, catchError } from 'rxjs/operators';",
			"import { of } from 'rxjs';",
			"",
			"import * as ${1:modelName}Actions from '../actions/${1:modelName}s.action';",
			"import * as fromServices from '../../services';",
			"import * as fromRoot from '../../../app/store';",
			"",
			"",
			"@Injectable()",
			"export class ${2:className}Effects {",
			"\tconstructor(",
			"\t\tprivate actions$: Actions,",
			"\t\tprivate ${1:modelName}sService: fromServices.${2:className}sService",
			"\t) {",
			"}",
			"",
			"@Effect()",
			"load${2:className}s$ = this.actions$.pipe(",
			"\tofType(${1:modelName}Actions.LOAD_${3:modelUpperCase}),",
			"\tswitchMap(() => {",
			"\t\treturn this.${1:modelName}sService.get${2:className}s().pipe(",
			"\t\t\tmap(${1:modelName}s => new ${1:modelName}Actions.Load${2:className}sSuccess(${1:modelName}s)),",
			"\t\t\tcatchError(error => of(new ${1:modelName}Actions.Load${2:className}sFail(error)))",
			"\t);",
			"}));",
			"",
			"@Effect()",
			"create${2:className}$ = this.actions$.pipe(",
			"\tofType(${1:modelName}Actions.CREATE_${3:modelUpperCase}),",
			"\tmap((action: ${1:modelName}Actions.Create${2:className}) =>",
			"\t\taction.payload",
			"\t),",
			"\tswitchMap(${1:modelName} => {",
			"\t\treturn this.${1:modelName}sService.create${2:className}(${1:modelName}).pipe(",
			"\t\t\tmap(${1:modelName} => new ${1:modelName}Actions.Create${2:className}Success(${1:modelName})),",
			"\t\t\tcatchError(error => of(new ${1:modelName}Actions.Create${2:className}Fail(error)))",
			"\t\t);",
			"\t}),",
			");",
			"",
			"@Effect()",
			"create${2:className}Success$ = this.actions$.pipe(",
			"ofType(${1:modelName}Actions.CREATE_${3:modelUpperCase}_SUCCESS),",
			"map((action: ${1:modelName}Actions.Create${2:className}Success) => action.payload),",
			"map(${1:modelName} => {",
			"return new fromRoot.Go({",
			"path: ['/${4:path}', ${1:modelName}.id],",
			"});",
			"}",
			")",
			");",
			"",
			"@Effect()",
			"update${2:className}$ = this.actions$.pipe(",
			"ofType(${1:modelName}Actions.UPDATE_${3:modelUpperCase}),",
			"map((action: ${1:modelName}Actions.Update${2:className}) => action.payload),",
			"switchMap((${1:modelName}) => {",
			"return this.${1:modelName}sService.update${2:className}(${1:modelName}).pipe(",
			"map(new${2:className} => new ${1:modelName}Actions.Update${2:className}Success(new${2:className})),",
			"catchError(error => of(new ${1:modelName}Actions.Update${2:className}Fail(error)))",
			");",
			"})",
			");",
			"",
			"",
			"@Effect()",
			"remove${2:className}$ = this.actions$.pipe(",
			"ofType(${1:modelName}Actions.REMOVE_${3:modelUpperCase}),",
			"map((action: ${1:modelName}Actions.Remove${2:className}) => action.payload),",
			"switchMap(${1:modelName} => {",
			"return this.${1:modelName}sService",
			".remove${2:className}(${1:modelName})",
			".pipe(",
			"map(() => new ${1:modelName}Actions.Remove${2:className}Success(${1:modelName})),",
			"catchError(error => of(new ${1:modelName}Actions.Remove${2:className}Fail(error)))",
			");",
			"})",
			")",
			"",
			"",
			"@Effect()",
			"handle${2:className}Success$ = this.actions$.pipe(",
			"ofType(${1:modelName}Actions.REMOVE_${3:modelUpperCase}_SUCCESS, ${1:modelName}Actions.UPDATE_${3:modelUpperCase}_SUCCESS),",
			"map(${1:modelName} => {",
			"return new fromRoot.Go({",
			"path: ['/${4:path}'],",
			"});",
			"}",
			")",
			");",
			"}",
			"",
		]
	},
	"@Reducer": {
		"prefix": "@ReducerCrud",
		"description": "CRUD for Reducer",
		"body": [
			"import * as form${1:className}s from '../actions/${2:modelName}s.action';",
			"import { ${1:className} } from '../../models/${2:modelName}.model';",
			"",
			"export interface ${1:className}State {",
			"\tentities: { [id: number]: ${1:className} };",
			"\tloaded: boolean;",
			"\tloading: boolean;",
			"}",
			"",
			"export const initialState: ${1:className}State = {",
			"\tentities: {},",
			"\tloaded: false,",
			"\tloading: false",
			"};",
			"",
			"",
			"export function reducer(",
			"\tstate = initialState,",
			"\taction: form${1:className}s.${1:className}sAction",
			"): ${1:className}State {",
			"\tswitch (action.type) {",
			"\t\tcase form${1:className}s.LOAD_${3:modelNameUppercase}: {",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\tloading: true",
			"\t\t\t};",
			"\t\t}",
			"\t\tcase form${1:className}s.LOAD_${3:modelNameUppercase}_SUCCESS: {",
			"\t\t\tconst ${2:modelName}s = action.payload;",
			"\t\t\tconst entities = ${2:modelName}s.reduce((entities: { [id: number]: ${1:className} }, ${2:modelName}: ${1:className}) => {",
			"\t\t\t\treturn {",
			"\t\t\t\t\t...entities,",
			"\t\t\t\t\t[${2:modelName}.id]: ${2:modelName}",
			"\t\t\t\t};",
			"\t\t\t}, {",
			"\t\t\t\t...state.entities",
			"\t\t\t});",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\tloading: false,",
			"\t\t\t\tloaded: true,",
			"\t\t\t\tentities,",
			"\t\t\t};",
			"\t\t}",
			"\t\tcase form${1:className}s.LOAD_${3:modelNameUppercase}_FAIL: {",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\tloading: false,",
			"\t\t\t\tloaded: false",
			"\t\t\t};",
			"\t\t}",
			"\t\tcase form${1:className}s.UPDATE_${3:modelNameUppercase}_SUCCESS:",
			"\t\tcase form${1:className}s.CREATE_${3:modelNameUppercase}_SUCCESS: {",
			"\t\t\tconst ${2:modelName} = action.payload;",
			"\t\t\tconst entities = {",
			"\t\t\t\t...state.entities,",
			"\t\t\t\t[${2:modelName}.id]: ${2:modelName}",
			"\t\t\t};",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\tentities",
			"\t\t\t};",
			"\t\t}",
			"\t\tcase form${1:className}s.REMOVE_${3:modelNameUppercase}_SUCCESS: {",
			"\t\t\tconst ${2:modelName} = action.payload;",
			"\t\t\tconst { [${2:modelName}.id]: removed, ...entities } = state.entities;",
			"",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\tentities,",
			"\t\t\t};",
			"\t\t}",
			"\t}",
			"",
			"\treturn state;",
			"}",
			"",
			"export const get${1:className}sEntities = (state: ${1:className}State) => state.entities;",
			"export const get${1:className}sLoading = (state: ${1:className}State) => state.loading;",
			"export const get${1:className}sLoaded = (state: ${1:className}State) => state.loaded;",
			"",
		]
	},
	"@ServiceNest": {
		"prefix": "@Service",
		"description": "Creates an @Injectable service for NestJs",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"// Interfaces",
			"import { ${1:className} } from '../interfaces/${2:name}.interface';",
			"import { Create${1:className}Dto } from '../dto/create-${2:name}.dto';",
			"",
			"@Injectable()",
			"export class ${1:className}sService {",
			"\t\t\t\tprivate ${2:name}s: ${1:className}[] = [];",
			"\t\t\t\tconstructor() { }",
			"\t\t\t\tpublic findAll(): ${1:className}[] {",
			"\t\t\t\t\t\t\t\treturn this.${2:name}s;",
			"\t\t\t\t}",
			"",
			"\t\t\t\tpublic findOne(id: string): ${1:className} {",
			"\t\t\t\t\t\t\t\treturn this.${2:name}s.find(${2:name} => ${2:name}.id === parseInt(id, 10));",
			"\t\t\t\t}",
			"",
			"\t\t\t\tpublic create(${2:name}: ${1:className}): number {",
			"\t\t\t\t\t\t\t\t${2:name}.id = this.${2:name}s.length + 1;",
			"\t\t\t\t\t\t\t\tthis.${2:name}s.push(${2:name});",
			"\t\t\t\t\t\t\t\treturn ${2:name}.id;",
			"\t\t\t\t}",
			"",
			"\t\t\t\tpublic delete(id: string): boolean {",
			"\t\t\t\t\t\t\t\tconst index = this.${2:name}s.findIndex((${2:name}) => ${2:name}.id === parseInt(id, 10));",
			"\t\t\t\t\t\t\t\tthis.${2:name}s.splice(index);",
			"\t\t\t\t\t\t\t\treturn true;",
			"\t\t\t\t}",
			"",
			"\t\t\t\tpublic update(${2:name}: Create${1:className}Dto, id: string): boolean {",
			"\t\t\t\t\t\t\t\tconst index = this.${2:name}s.findIndex((${2:name}) => ${2:name}.id === parseInt(id, 10));",
			"\t\t\t\t\t\t\t\tthis.${2:name}s[index] = ${2:name} as ${1:className};",
			"\t\t\t\t\t\t\t\treturn true;",
			"\t\t\t\t}",
			"}",
			""
		]
	},
}
